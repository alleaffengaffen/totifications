name: urlwatch
on:
  push:
    branches:
      - develop
  schedule:
    - cron: '0 6-22/4 * * 1-5'
  workflow_dispatch:


env:
  STATE_BUCKET: "totifications"
  STATE_BUCKET_REGION: "eu-west-1" 

jobs:
  run:
    runs-on: ubuntu-22.04
    permissions: 
      id-token: write
      contents: read
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::141091412313:role/totifications
          role-session-name: totifications
          aws-region: ${{ env.STATE_BUCKET_REGION }}
      - name: Fetch secrets from AKeyless
        id: fetch-secrets
        uses: LanceMcCarthy/akeyless-action@v3
        with:
          access-id: ${{ secrets.AKEYLESS_ACCESS_ID }}
          static-secrets: |
            {
              "/actions/telegram_token":"TELEGRAM_TOKEN",
              "/actions/chat_id":"CHAT_ID"
            }
      - name: Setup go-template-cli
        run: |
          curl -fsSL -o /tmp/tpl https://github.com/bluebrown/go-template-cli/releases/download/v0.2.0/tpl-linux-amd64
          sudo install -m 555 /tmp/tpl /usr/local/bin/tpl
          tpl --version
      - uses: actions/checkout@v4
      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      # - name: Cache pip
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      #       ${{ runner.os }}-
      - name: Install urlwatch & dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
      - name: Grab cachedb from s3
        if: always()
        run: aws s3 cp s3://${{ env.STATE_BUCKET }}/cache.db cache.db
      - name: Template configs
        if: always()
        run: |
          cat <<EOF | tpl -f urlwatch.yaml > rendered-urlwatch.yaml
          {
            "telegram_token": "${{ env.TELEGRAM_TOKEN }}",
            "chat_id": "${{ env.CHAT_ID }}"
          }
          EOF
      - name: Run urlwatch
        if: always()
        run: urlwatch --config=rendered-urlwatch.yaml --urls=urls.yaml --cache=cache.db
      - name: Put cachedb to s3
        if: always()
        run: aws s3 cp cache.db s3://${{ env.STATE_BUCKET }}/cache.db
